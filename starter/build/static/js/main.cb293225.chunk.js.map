{"version":3,"sources":["components/Book/Book.js","components/SearchBooks/SearchBooks.js","components/NavBar/NavBar.js","components/BookShelf/BookShelf.js","BooksAPI.js","components/SearchButton/SearchButton.js","App.js","index.js"],"names":["Book","props","bookTitle","bookAuthor","thumbnail","currentShelf","onUpdateShelf","bookData","bookAuthorString","map","a","undefined","join","className","style","width","height","backgroundImage","value","onChange","e","shelf","updateShelfHandler","target","disabled","SearchBooks","onClose","searchedBooks","onSearchQuery","updateShelf","useState","searchTerm","setSearchTerm","isValidSearch","setValidSearch","useEffect","identifier","setTimeout","length","clearTimeout","onClick","type","placeholder","Array","isArray","book","title","authors","imageLinks","id","NavBar","BookShelf","books","filteredBooks","filter","console","log","smallThumbnail","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","SearchButton","onOpen","App","showSearchPage","setShowSearchpage","setBooks","query","setQuery","setSearchedBooks","toggleSearchBooksPage","fetch","then","res","json","data","maxResults","method","body","JSON","stringify","catch","err","search","result","searchedBook","isExist","find","update","updatedBooksArray","duplicateBookIndex","findIndex","newBook","splice","push","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb293225.chunk.js","sourcesContent":["const Book = (props) => {\r\n  const {\r\n    bookTitle,\r\n    bookAuthor,\r\n    thumbnail,\r\n    currentShelf,\r\n    onUpdateShelf,\r\n    bookData,\r\n  } = props;\r\n\r\n  const authors = (bookAuthor || []).map((a) => (a === undefined ? \"\" : a));\r\n\r\n  const bookAuthorString = authors.join(\", \");\r\n\r\n  const updateShelfHandler = (bookData, shelf) => {\r\n    onUpdateShelf(bookData, shelf);\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <div\r\n            className=\"book-cover\"\r\n            style={{\r\n              width: 128,\r\n              height: 193,\r\n              backgroundImage: `url(${thumbnail})`,\r\n            }}\r\n          ></div>\r\n          <div className=\"book-shelf-changer\">\r\n            <select\r\n              value={currentShelf}\r\n              onChange={(e) => updateShelfHandler(bookData, e.target.value)}\r\n            >\r\n              <option value=\"moveTo\" disabled>\r\n                Move to...\r\n              </option>\r\n              <option value=\"currentlyReading\">Currently Reading</option>\r\n              <option value=\"wantToRead\">Want to Read</option>\r\n              <option value=\"read\">Read</option>\r\n              <option value=\"none\">None</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"book-title\">{bookTitle}</div>\r\n        <div className=\"book-authors\">{bookAuthorString}</div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Book;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Book from \"../Book/Book\";\r\n\r\nconst SearchBooks = (props) => {\r\n  const { onClose, searchedBooks, onSearchQuery, updateShelf } = props;\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [isValidSearch, setValidSearch] = useState(false);\r\n\r\n  const closeSearchBooksPageHandler = () => {\r\n    onClose();\r\n    setSearchTerm(\"\");\r\n    setValidSearch(false);\r\n  };\r\n\r\n  const searchQueryHandler = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  //   cleanup to not flood fetch requests\r\n  useEffect(() => {\r\n    const identifier = setTimeout(() => {\r\n      setValidSearch(searchTerm.length > 0);\r\n      onSearchQuery(searchTerm);\r\n    }, 800);\r\n\r\n    return () => {\r\n      clearTimeout(identifier);\r\n    };\r\n  }, [searchTerm]);\r\n\r\n  return (\r\n    <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <a className=\"close-search\" onClick={closeSearchBooksPageHandler}>\r\n          Close\r\n        </a>\r\n        <div className=\"search-books-input-wrapper\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by title, author, or ISBN\"\r\n            value={searchTerm}\r\n            onChange={searchQueryHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\">\r\n          {isValidSearch && Array.isArray(searchedBooks)\r\n            ? searchedBooks.map((book) => {\r\n                return (\r\n                  <Book\r\n                    bookTitle={book.title}\r\n                    bookAuthor={book.authors}\r\n                    thumbnail={\r\n                      book.imageLinks?.thumbnail ||\r\n                      \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\r\n                    }\r\n                    key={book.id}\r\n                    currentShelf={book.shelf}\r\n                    onUpdateShelf={updateShelf}\r\n                    bookData={book}\r\n                  />\r\n                );\r\n              })\r\n            : null}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","const NavBar = () => {\r\n  return (\r\n    <div className=\"list-books-title\">\r\n      <h1>MyReads</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import Book from \"../Book/Book\";\r\n\r\nconst BookShelf = ({ title, books, shelf, updateShelf }) => {\r\n  const filteredBooks = books.filter((book) => book.shelf === shelf); //is slow\r\n\r\n  console.log(filteredBooks[0]);\r\n\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 className=\"bookshelf-title\">{title}</h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {filteredBooks.map((book) => (\r\n            <Book\r\n              bookTitle={book.title}\r\n              bookAuthor={book.authors}\r\n              thumbnail={\r\n                book.imageLinks?.smallThumbnail ||\r\n                \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\r\n              }\r\n              key={book.id}\r\n              currentShelf={shelf}\r\n              onUpdateShelf={updateShelf}\r\n              bookData={book}\r\n            />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookShelf;\r\n","const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\nexport const search = (query, maxResults) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query, maxResults }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books)\r\n    .catch((err) => console.log(err));\r\n","const SearchButton = (props) => {\r\n  const { onOpen } = props;\r\n\r\n  const openSearchPageHandler = () => {\r\n    onOpen();\r\n  };\r\n  return (\r\n    <div className=\"open-search\">\r\n      <a onClick={openSearchPageHandler}>Add a book</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchButton;\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SearchBooks from \"./components/SearchBooks/SearchBooks\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport BookShelf from \"./components/BookShelf/BookShelf\";\r\nimport { getAll, search, update } from \"./BooksAPI\";\r\nimport SearchButton from \"./components/SearchButton/SearchButton\";\r\n\r\nfunction App() {\r\n  const [showSearchPage, setShowSearchpage] = useState(false);\r\n  const [books, setBooks] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  const [filteredBooks, setFilteredBooks] = useState([]);\r\n\r\n  const toggleSearchBooksPage = () => {\r\n    setShowSearchpage(!showSearchPage);\r\n  };\r\n\r\n  const searchQuery = (searchTerm) => {\r\n    setQuery(searchTerm);\r\n  };\r\n\r\n  const filterBooksByShelf = (books) => {\r\n    setFilteredBooks(\r\n      books.map((book) => {\r\n        //create a json each array has shelf title\r\n        //create string thats resembles JSON which then can be parsed JSON.parse(string)\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAll().then((data) => {\r\n      setBooks(data);\r\n      books.map((book) => {});\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (query === \"\") {\r\n      setQuery(\"\");\r\n      return;\r\n    }\r\n    search(query).then((result) => {\r\n      setSearchedBooks(\r\n        Array.isArray(result) &&\r\n          result.map((searchedBook) => {\r\n            const isExist = books.find((book) => book.id === searchedBook.id);\r\n            searchedBook.shelf = isExist ? isExist.shelf : \"none\";\r\n            return searchedBook;\r\n          })\r\n      );\r\n    });\r\n  }, [query]);\r\n\r\n  const updateShelf = (book, shelf) => {\r\n    update(book, shelf).then(() => {\r\n      const updatedBooksArray = [...books];\r\n\r\n      const duplicateBookIndex = updatedBooksArray.findIndex(\r\n        (newBook) => newBook.id === book.id\r\n      );\r\n      duplicateBookIndex !== -1 &&\r\n        updatedBooksArray.splice(duplicateBookIndex, 1);\r\n\r\n      //adding all book attr + new shelf to a new obj then, pushing into the array.\r\n      shelf !== \"none\" && updatedBooksArray.push({ ...book, shelf: shelf });\r\n\r\n      setBooks(updatedBooksArray);\r\n\r\n      setSearchedBooks(\r\n        Array.isArray(searchedBooks) &&\r\n          searchedBooks.map((searchedBook) => {\r\n            searchedBook.id === book.id && (searchedBook.shelf = shelf);\r\n            return searchedBook;\r\n          })\r\n      );\r\n    });\r\n  };\r\n\r\n  // {[\r\n  //   {\r\n  //     title: \"Currently\",\r\n  //     books: books,\r\n  //     shelf: currentlyReading,\r\n  //     updateShelf: updateShelf,\r\n  //   },\r\n  //   {\r\n  //     title: \"Currently\",\r\n  //     books: books,\r\n  //     shelf: currentlyReading,\r\n  //     updateShelf: updateShelf,\r\n  //   },\r\n  //   {\r\n  //     title: \"Currently\",\r\n  //     books: books,\r\n  //     shelf: currentlyReading,\r\n  //     updateShelf: updateShelf,\r\n  //   },\r\n  // ]}\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {showSearchPage ? (\r\n        <SearchBooks\r\n          onClose={toggleSearchBooksPage}\r\n          searchedBooks={searchedBooks}\r\n          onSearchQuery={searchQuery}\r\n          updateShelf={updateShelf}\r\n        />\r\n      ) : (\r\n        <div className=\"list-books\">\r\n          <NavBar />\r\n          <div className=\"list-books-content\">\r\n            <div>\r\n              <BookShelf\r\n                title={\"Currently Reading\"}\r\n                books={books}\r\n                shelf={\"currentlyReading\"}\r\n                updateShelf={updateShelf}\r\n              />\r\n              <BookShelf\r\n                title={\"Want To Read\"}\r\n                books={books}\r\n                shelf={\"wantToRead\"}\r\n                updateShelf={updateShelf}\r\n              />\r\n              <BookShelf\r\n                title={\"Read\"}\r\n                books={books}\r\n                shelf={\"read\"}\r\n                updateShelf={updateShelf}\r\n              />\r\n            </div>\r\n          </div>\r\n          <SearchButton onOpen={toggleSearchBooksPage} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}